#define _CRT_SECURE_NO_WARNINGS
 2018.cpp 定义控制台应用程序的入口点。


#undef UNICODE
#undef _UNICODE
#includeiostream
using namespace std;
#include stdafx.h
#includestdio.h  输入输出
#includeeasyx.h  图形库
#includetime.h 随机时间种子
#includeconio.h   操作键位获取
#includedirect.h  获取路径
#includeWindows.h
#pragma comment(lib,Winmm.lib)   给游戏添加音乐要用到它

#ifdef _ConsoleDisappear  
#pragma comment( linker, subsystemwindows entrywmainCRTStartup)   
#else  
#pragma comment( linker, subsystemwindows entrymainCRTStartup)  
#endif    控制台窗体隐藏

#define Num_picture 15


函数声明
void game();  2048主程序
void show(int map[][5]);  界面
void summer(int &a, int &b, int &c, int &d); 算法
void start();
void egg(int map[][5]);
											 
											 
											 
void Login()
{
	setfillstyle(BS_SOLID);
	setbkcolor(LIGHTBLUE);
	char s[] = 开始游戏;
	char ss[] = 退出游戏;
	char sss[] = 游戏说明 W 键 = 跳跃   S 键 = 滚动;

	MOUSEMSG m;
	solidrectangle(240, 100, 380, 150);
	solidrectangle(240, 160, 380, 210);
	settextcolor(BLUE);					 设置字体颜色

	outtextxy(260, 113, s);
	outtextxy(260, 173, ss);

	setbkcolor(WHITE);
	outtextxy(110, 250, sss);

	setfillcolor(LIGHTBLUE);

	solidrectangle(0, 360, 640, 400);

	while (true)
	{
		m = GetMouseMsg();				 判断是否按下鼠标
		if (m.x = 240 && m.x = 380 && m.y = 100 && m.y = 150)
		{
			setlinecolor(RED);			 选中框框线条颜色
			rectangle(235, 95, 385, 155);
			if (m.uMsg == WM_LBUTTONDOWN)
			{
				clearrectangle(240, 100, 380, 150);
				clearrectangle(240, 160, 380, 210);
				setbkcolor(WHITE);
				cleardevice();
				game_again();
			}
		}
		else if (m.x = 240 && m.x = 380 && m.y = 160 && m.y = 210)
		{
			setlinecolor(RED);			 选中框框线条颜色
			rectangle(235, 155, 385, 215);
			if (m.uMsg == WM_LBUTTONDOWN)
			{
				exit(1);
			}
		}
		else
		{
			setlinecolor(WHITE);
			rectangle(235, 95, 385, 155);
			rectangle(235, 155, 385, 215);
		}
	}
}


 界面初始化
void UI()
{
	initgraph(640, 400);				 窗口初始化大小
	setbkcolor(WHITE);					 设置背景颜色
	cleardevice();
	setlinecolor(BLACK);				 设置绘图颜色
	settextcolor(BLACK);				 设置文字颜色
	setfillcolor(LIGHTBLUE);			 设置填充颜色
	settextstyle(25, 0, _T(宋体));	 字体样式大小
	srand((unsigned int)time(NULL));	 设置随机种子
}





函数定义

void show(int map[][5])
{
	int i, j;
	图形部分
#if 1


	IMAGE img[Num_picture];

	loadimage(&img[0], _T(rcpicture0.jpg), 160, 160);加载图片
	loadimage(&img[1], _T(rcpicture1.jpg), 160, 160);  加载图片
	loadimage(&img[2], _T(rcpicture2.jpg), 160, 160);  加载图片
	loadimage(&img[3], _T(rcpicture3.jpg), 160, 160);  加载图片
	loadimage(&img[4], _T(rcpicture4.jpg), 160, 160);  加载图片
	loadimage(&img[5], _T(rcpicture5.jpg), 160, 160);  加载图片
	loadimage(&img[6], _T(rcpicture6.jpg), 160, 160);  加载图片
	loadimage(&img[7], _T(rcpicture7.jpg), 160, 160);  加载图片
	loadimage(&img[8], _T(rcpicture8.jpg), 160, 160);  加载图片
	loadimage(&img[9], _T(rcpicture9.jpg), 160, 160);  加载图片
	loadimage(&img[10], _T(rcpicture10.jpg), 160, 160);  加载图片
	loadimage(&img[11], _T(rcpicture11.jpg), 160, 160);  加载图片
	loadimage(&img[12], _T(rcpicture12.jpg), 160, 160);  加载图片
	loadimage(&img[13], _T(rcpicture13.jpg), 160, 160);  加载图片
	loadimage(&img[14], _T(rcpicture14.jpg), 160, 160);  加载图片

#endif  1

	for (i = 0; i  4; ++i)i++  给变量加1
	{
		for (j = 0; j  4; ++j)
		{
			switch (map[i][j])分支语句
			{
			case 0
				putimage(160  i, 160  j, &img[0]);贴图
				break;
			case 2
				putimage(160  i, 160  j, &img[1]);贴图
				break;
			case 4
				putimage(160  i, 160  j, &img[2]);贴图

				break;
			case 8
				putimage(160  i, 160  j, &img[3]);贴图
				break;
			case 16
				putimage(160  i, 160  j, &img[4]);贴图
				break;
			case 32
				putimage(160  i, 160  j, &img[5]);贴图
				break;
			case 64
				putimage(160  i, 160  j, &img[6]);贴图

				break;
			case 128
				putimage(160  i, 160  j, &img[7]);贴图
				break;
			case 256
				putimage(160  i, 160  j, &img[8]);贴图
				break;
			case 512
				putimage(160  i, 160  j, &img[9]);贴图
				break;
			case 1024
				putimage(160  i, 160  j, &img[10]);贴图

				break;
			case 2048
				putimage(160  i, 160  j, &img[11]);贴图
				break;
			case 4096
				putimage(160  i, 160  j, &img[12]);贴图
				break;
			case 8192
				putimage(160  i, 160  j, &img[13]);贴图
				break;
			default
				putimage(160  i, 160  j, &img[14]);贴图
				break;
			}
		}
	}


}



void start()
{
	initgraph(640, 640);
	IMAGE img_US;

	loadimage(&img_US, _T(rcothersUS.jpg), 640, 640);加载图片
	putimage(0, 0, &img_US); 输出图片 background
	MessageBox(0, L以此纪念过去我们在一起的和不再一起的600天,n以及我们未来“心”在一起的每一天q(≧▽≦q)n, L2016.8.19-2018.4.11, MB_OK);
	closegraph();
}


void summer(int &a, int &b, int &c, int &d)
{
	int i, j;
	int harr[4] = { a,b,c,d };
	int arr[4] = { 0 };

	for (i = 0,j=0; i  4; i++)
	{
		if (harr[i] != 0)
		{
			arr[j++] = harr[i];
		}
	}

	for (int k = 0; k  4; k++)
	{
		for (i = 0; i  3; i++)
		{
			if (arr[i] == arr[i + 1])
			{
				arr[i] = arr[i]2;  游戏算法，相邻两个格子元素相同，那么2
				for (j = i + 1; j  3; j++)
				{
					arr[j] = arr[j + 1];
				}
				arr[j] = 0;
			}
			else if(arr[i]==0&&arr[i+1]==0&&i2)零时移动
			{
				arr[i] = arr[i + 2];
				arr[i + 2] = 0;
			}
			else if (arr[i] == 0)零时移动
			{
				arr[i] = arr[i + 1];
				arr[i + 1] = 0;
			}
		}

	}
	a = arr[0];
	b = arr[1];
	c = arr[2];
	d = arr[3];  相邻两个元素相同碰撞2

}

void egg(int map[][5])
{
	int i, j,index=0;
	图形部分
#if 2
	char FilePath[MAX_PATH];
	char SaveResult[MAX_PATH];
	char str_path[MAX_PATH];
	char str_img[MAX_PATH];
	GetModuleFileNameA(0, FilePath, MAX_PATH); 获得当前执行文件的路径  
	FilePath[strrchr(FilePath, '') - FilePath + 1] = 0;将最后一个后的字符置为0  
	strcpy_s(SaveResult, FilePath);
	strcat_s(SaveResult, bin%d.jpg);在当前路径后添加子路径  


	for ( i = 0; i  Num_picture-10; i++)
	{
		sprintf_s(str_path, SaveResult, i);
		sprintf_s(str_img, %d.jpg, i);
		printf(%sn, str_path);

		const char pp = (const char)str_path;
		char str[10] = 1.jpg;
		LPCTSTR str= (LPCTSTR)str_path;
		str = (CT2A)str_path;
		loadimage(&img[i], Lbin1.jpg, 160, 160);  加载图片

	}

	IMAGE img[Num_picture+1];

	loadimage(&img[0], _T(rceggstr.jpg), 160, 160);加载图片
	loadimage(&img[1], _T(rcpicture1.jpg), 160, 160);  加载图片
	loadimage(&img[2], _T(rcpicture2.jpg), 160, 160);  加载图片
	loadimage(&img[3], _T(rcpicture3.jpg), 160, 160);  加载图片
	loadimage(&img[4], _T(rcpicture4.jpg), 160, 160);  加载图片
	loadimage(&img[5], _T(rcpicture5.jpg), 160, 160);  加载图片
	loadimage(&img[6], _T(rcpicture6.jpg), 160, 160);  加载图片
	loadimage(&img[7], _T(rcpicture7.jpg), 160, 160);  加载图片
	loadimage(&img[8], _T(rcpicture8.jpg), 160, 160);  加载图片
	loadimage(&img[9], _T(rcpicture9.jpg), 160, 160);  加载图片
	loadimage(&img[10], _T(rcpicture10.jpg), 160, 160);  加载图片
	loadimage(&img[11], _T(rcpicture11.jpg), 160, 160);  加载图片
	loadimage(&img[12], _T(rcpicture12.jpg), 160, 160);  加载图片
	loadimage(&img[13], _T(rcpicture13.jpg), 160, 160);  加载图片
	loadimage(&img[14], _T(rcpicture14.jpg), 160, 160);  加载图片
	loadimage(&img[15], _T(rceggend.jpg), 160, 160);  加载图片

	mciSendString(Lopen rcmusicegg_bg.mp3 alias music_egg_bg, NULL, 0, NULL);

	mciSendString(Lopen play music_bg repeat, NULL, 0, NULL);

	putimage(0, 0, &img[0]); 输出图片 background


	for (i = 0; i = 640; i+=160)
	{
		line(0, i, 640, i);
		line(i, 0, i, 640);
	}
#endif  2
	mciSendString(Lplay music_egg_bg from 0, NULL, 0, NULL);

	for (i = 0; i  4; i++)i++  给变量加1
	{
		for ( j = 0; j  4; j++)
		{

				putimage(160  i, 160  j, &img[index++]);贴图
				Sleep(1000);
		}
	}
	while (1)
	{
		for (j = 0; j  4; j++)i++  给变量加1
		{
			for (i = 0; i  4; i++)
			{
				srand((unsigned)time(0));
				putimage(160  i, 160  j, &img[rand()%16]);贴图
				Sleep(100);
			}
		}

	}
	
}






void game()
{
	mciSendString(Lopen rcmusic600.mp3 alias music_600, NULL, 0, NULL);
	mciSendString(Lopen rcmusicmove.mp3 alias music_move, NULL, 0, NULL);

	int map[5][5] = { 0 };  创建二维数组
	int i, j,  flag = 0, full = 0;

	while (1)
	{
		if (full == 0)
		{
			do
			{
				i = rand() % 4;
				j = rand() % 4;
			} while (map[i][j] != 0);
		}
		map[i][j] = 2; 在空白位置生成一个2
					   每动一下 在空白位置生成一个2
		show(map);
		srand((unsigned)time(0)); 设置随机种子

Re_Cin
		int c1 = 0;
		int c2 = 0;
		if (c1 = _getch())
		{
			
			if (c1 == '6')
			{
				mciSendString(Lplay music_600 from 0, NULL, 0, NULL);
				c1 = _getch();
				if (c1 == '0')
				{
					c1 = _getch();
					if (c1=='0')
					{
						egg(map);
					}
				}
			}


			else if (c1 == 'A'  c1 == 'a'  c1 == 'S'  c1 == 's'  c1 == 'D'  c1 == 'd'  c1 == 'W'  c1 == 'w')
			{
				c2 = c1;
				goto WASD;
			}
			c2 = _getch(); 第一次调用getch()，返回值224
		}
		
	WASD
		mciSendString(Lplay music_move from 0, NULL, 0, NULL);
		switch (c2) 获取操作键位   第二次调用getch()
		{
		case'A'
		case'a'
		case 75
			向左
			for (j = 0; j  4; j++)
			{
				summer(map[0][j], map[1][j], map[2][j], map[3][j]);
				summer(map[i][0], map[i][1], map[i][2], map[i][3]);

			}
			break;


		case'W'
		case'w'
		case 72
			for (i = 0; i  4; i++)
			{
				summer(map[i][0], map[i][1], map[i][2], map[i][3]);
				summer(map[0][j], map[1][j], map[2][j], map[3][j]);

			}
			break;

		case'D'
		case'd'
		case 77
			for (j = 0; j  4; j++)
			{
				summer(map[3][j], map[2][j], map[1][j], map[0][j]);
				summer(map[i][3], map[i][2], map[i][1], map[i][0]);

			}
			break;

		case'S'
		case's'
		case 80
			for (i = 0; i  4; i++)
			{
				summer(map[i][3], map[i][2], map[i][1], map[i][0]);
				summer(map[3][j], map[2][j], map[1][j], map[0][j]);

			}
			break;


		default
			goto Re_Cin;
			return;
			break;
		}

		


		判断游戏是否结束
		达到2048是否继续 不结束怎么办
		if (flag == 0)
		{
			for (i = 0; i  4; i++)
			{
				for (j = 0; j  4; j++)
				{
					if (map[i][j] = 2048)
					{
						show(map);
						if (MessageBox(0, L666，你已激活“600”彩蛋n要继续么？(　o=^•ェ•)o　┏━┓, L选择, MB_YESNO) == IDOK)
						{
							flag = 1;
						}
						else
						{
							return;
						}
					}
				}
			}
		}
		结束游戏的条件：相邻元素都没有相同的，并且格子满了

		多了加一圈 不用去考虑边界

		int over = 1;
		for (i = 0; i  4; i++)
		{
			for ( j = 0; j  4; j++)
			{
				if (map[i][j] == map[i + 1][j]  map[i][j] == map[i][j + 1])
				{
					可以继续
					over = 0;
				}
			}
		}
		full = 1;
		for ( i = 0; i  4; i++)
		{
			for (j = 0; j  4; j++)
			{
				if (map[i][j]==0)
				{
					可以继续
					over = 0;
					full = 0;
				}
			}
		}

		判断是否结束游戏
		if (over == 1)
		{
			show(map);
			if(flag==1)
			{
				MessageBox(0, L拓拓小仙女，结束了(～﹃～)~zZ, LGame Over, MB_OK);
				return;
			}
			else
			{
				MessageBox(0, L游戏失败(＿　＿), LFailed, MB_OK);
				return;
			}
		}

		show(map);

	}
}

#pragma comment( linker, subsystemwindows entrymainCRTStartup )
int main(int argc, char argv[])
{
	char buffer[MAX_PATH];
	_getcwd(buffer, MAX_PATH);
	printf(%sn, buffer);

	char chpath[MAX_PATH];
	GetModuleFileName(NULL, (LPWSTR)chpath, sizeof(chpath));
	stdcout  chpath  stdendl;
	printf(%sn, chpath);

	char FilePath[MAX_PATH];
	char SaveResult[MAX_PATH];
	GetModuleFileNameA(0, FilePath, MAX_PATH); 获得当前执行文件的路径  
	FilePath[strrchr(FilePath, '') - FilePath + 1] = 0;将最后一个后的字符置为0  
	strcpy_s(SaveResult, FilePath);
	strcat_s(SaveResult, OutMessageoutMessagebyJam.txt);在当前路径后添加子路径  
	printf(%sn %sn, FilePath, SaveResult);
	UI();
	Login();
	ShowWindow(FindWindow(LConsoleWindowClass, argv[0]), 0);
	start();



	initgraph(640, 640);

	setbkmode(TRANSPARENT); 设置背景透明
	settextcolor(BLACKLIGHTCYAN);设置字体颜色
	settextstyle(42, 0, LBodoni MT Black); 字体风格设置

	函数主体部分
	循环游戏？
	while (1)
	{
		game();
		判断用户是否循环游戏
		if (MessageBox(0,L再来一次(+_+),L游戏继续,MB_RETRYCANCEL)==IDCANCEL)
		{
			break;
		}
	}
	mciSendString(Lclase all, NULL, 0, NULL);关闭所有多媒体音乐文件
	closegraph();
	system(pause);
    return 0;
}
